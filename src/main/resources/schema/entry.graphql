scalar Date
scalar NonNegativeInt
scalar Url
scalar DateTime

union SmartSearchResult = Book | MobileApp

# if query name is Query there is no need to specify schema like below
type Query{
  allHellos: [Hello]
  oneHello: Hello
  books(authorName: String): [Book]
  booksByReleaseYear(releasedHistoryInput: ReleasedHistoryInput!): [Book]
  mobileApps(mobileAppFilter: MobileAppFilter) : [MobileApp]
  pets(petFilter: PetFilter): [Pet]
  smartSearch(searchTerm: String) : [SmartSearchResult]
  headerDemo: String

  me: User
  userLogin(userLoginInput: UserLoginInput!): UserResponse
  questionLatestList: [Question]
  questionDetails(id: ID): Question
  questionAndAnswerSearch(term: String): [SearchableItem]
}

type Mutation{
  addHello(helloInput : HelloInput!): Int
  changeHello(helloInput: HelloInput!) : [Hello]
  deleteHello(helloNum: Int): Int

#  for q and A
  userCreate(userCreateInput : UserCreateInput!): UserResponse
  userActivate(userActivateInput: UserActivateInput): UserActivationResponse
  questionCreate(questionCreateInput: QuestionCreateInput): Question
  answerCreate(answerCreateInput: AnswerCreateInput): Answer
  answerVote(answerVoteInput: AnswerVoteInput): Answer
}

type Subscription{
  randomStock: Stock
  questionAdded: Question
  answerVoteChanged(answerId: ID): Answer
}

#schema {
#  query: Query,
#
#}


